
# Copyright (C) 2023-2025 Cognizant Digital Business, Evolutionary AI.
# All Rights Reserved.
# Issued under the Academic Public License.
#
# You can be released from the terms, and requirements of the Academic Public
# License by purchasing a commercial license.
# Purchase of a commercial license is mandatory for any use of the
# neuro-san SDK Software in commercial settings.
#
# END COPYRIGHT
{
    # Importing content from other HOCON files
    # The include keyword must be unquoted and followed by a quoted URL or file path.
    # File paths should be absolute or relative to the script's working directory, not the HOCON file location.

   # This "aaosa.hocon" file contains key-value pairs used for substitution.
    # Specifically, it provides values for the following keys:
    #   - aaosa_call
    #   - aaosa_command
    #   - aaosa_instructions
    #
    # IMPORTANT:
    # Ensure that you run `python -m run` from the top level of the repository.
    # The path to this substitution file is **relative to the top-level directory**,
    # so running the script from elsewhere may result in file not found errors.

    include "registries/aaosa.hocon"

    "llm_config": {
        "model_name": "gpt-4o",
    },
    "tools": [
        # These tool definitions do not have to be in any particular order
        # How they are linked and call each other is defined within their
        # own specs.  This could be a graph, potentially even with cycles.

        # This first guy is the "Front Man".  He is identified as such because
        # he is the only one with no parameters in his function definition,
        # and therefore he needs to talk to the outside world to get things rolling.
        {
            "name": "cruse",

            # Note that there are no parameters defined for this guy's "function" key.
            # This is the primary way to identify this tool as a front-man,
            # distinguishing it from the rest of the tools.

            "function": {
                "description": "Enable GUI interface interaction.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "user_inquiry": {
                            "type": "string",
                            "description": """
                            An inquiry from a user.
                            """
                        },
                        "gui_context": {
                            "type": "string",
                            "description": """
                            The state of the user interface at the time of inquiry.
                            """
                        },
                    },
                    "required": ["user_inquiry"]
                }
            },

            "instructions": """
Use your tool to respond to the inquiry. Note that the inquiry might have a text part, as well as a context part,
which is what the user did in the interface gui.
Your response should include a chat text, prefaced by 'say:' as well as an html body tag, prefaced by 'gui:' that
will be rendered in the interface so the user can respond to requirements either in chat, or using the html forms,
or a combination of both.
            """ ${aaosa_instructions},
            "tools": ["domain_expert"]
        },
        {
            "name": "domain_expert",
            "function": ${aaosa_call},
            "instructions": """
In intermediary to its tools, passing user inquiries and context as well as the tool responses back and forth.
            """,

            # Feel free to change the name of the agent below to any other agent network, preferably AAOSA agents
            # TODO: Can we make this dynamic?
            "tools": ["/intranet_agents"]
            "command": ${aaosa_command},
        },
    ]
}
